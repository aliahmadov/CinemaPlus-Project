@using Cinema.Entities.Models;
@using Cinema.UI.Helpers.ConstantHelpers;
@using System.Text.RegularExpressions;
@model SessionSeatsViewModel;
@{
    ViewData["Title"] = "3D Seats";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Perspective Seat Preview | Codrops</title>
    <meta name="description" content="An experimental demo where a 3D perspective preview is shown for a selected seat in a cinema room." />
    <meta name="keywords" content="cinema, seat booking, seating plan, perspective, 3d" />
    <meta name="author" content="Codrops" />
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" type="text/css" href="~/css/normalize.css" />
    <link rel="stylesheet" type="text/css" href="~/css/demo.css" />
    <link rel="stylesheet" type="text/css" href="~/css/component.css" />
    <script src="~/js/modernizr-custom.js"></script>
  
</head>
<body>
    <div class="container">
        <div class="cube">
            <div class="cube__side cube__side--front"></div>
            <div class="cube__side cube__side--back">
                <div class="screen">
                    <div class="video">
                        @{
                            var embedUrl = Model?.Session?.Movie?.TrailerUrl;

                            string thumbnailUrl = $"https://img.youtube.com/vi/{Regex.Match(embedUrl, @"/embed/([a-zA-Z0-9_-]+)").Groups[1].Value}/0.jpg";

                            var videoUrl = $"{Model.Session.Movie.TrailerUrl}?autoplay=1&mute=1";
                        }
                        <iframe class="video-player" width="560" height="315" src=@videoUrl frameborder="0" style="pointer-events: none;"></iframe>

                        <button class="action action--play action--shown" aria-label="Play Video"></button>
                    </div>
                    <div class="intro intro--shown">
                        <div class="intro__side">
                            <h2 class="intro__title">
                                <span class="intro__up">CinemaPlus <em>presents</em></span>
                                <span class="intro__down">@Model.Session.Movie.Title <span class="intro__partial"><em>by</em> <a>@Model.Session.Movie.Director</a></span></span>
                            </h2>
                        </div>
                        <div class="intro__side">
                            <button class="action action--seats">Select your seats</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="cube__side cube__side--left"></div>
            <div class="cube__side cube__side--right"></div>
            <div class="cube__side cube__side--top"></div>
            <div class="rows rows--large">
                @for (int i = 0; i < ApplicationConstants.SeatsSideCount; i++)
                {
                    <div class="row">
                        @{
                            var items = Model.Seats.GetRange(i * ApplicationConstants.SeatsSideCount, ApplicationConstants.SeatsSideCount);

                            @for (int j = 0; j < items.Count; j++)
                            {
                                var dataTooltip = $"{i}-{j}";
                                <div data-seat=@dataTooltip class="row__seat"></div>
                            }
                        }
                    </div>
                }
            </div>
            <!-- /rows -->
        </div><!-- /cube -->
    </div><!-- /container -->
    <div class="plan">
        <h3 class="plan__title">Seating Plan</h3>
        <div class="rows rows--mini">
            @for (int i = 0; i < ApplicationConstants.SeatsSideCount; i++)
            {
                <div class="row">
                    @{
                        var items = Model.Seats.GetRange(i * ApplicationConstants.SeatsSideCount, ApplicationConstants.SeatsSideCount);

                        @for (int j = 0; j < items.Count; j++)
                        {
                            var dataTooltip = $"{i+1}-{j+1}";

                            if (items[j].IsAvailable)
                            {

                                <div class="row__seat tooltip" data-tooltip=@dataTooltip></div>
                            }
                            else
                            {
                                <div class="row__seat row__seat--reserved"></div>
                            }
                        }
                    }
                </div>
            }
        </div>
        <!-- /rows -->
        <ul class="legend">
            <li class="legend__item legend__item--free">Free</li>
            <li class="legend__item legend__item--reserved">Reserved</li>
            <li class="legend__item legend__item--selected">Selected</li>
        </ul>
        <button class="action action--buy">Buy tickets</button>
    </div><!-- /plan -->
    <button class="action action--lookaround action--disabled" arial-label="Unlook View"></button>
    <script src="~/js/classie.js"></script>
    <script src="~/js/main.js"></script>
    <script>
        // Function to disable interactions with the iframe
        function disableIframe(iframe) {
            console.log("disabled");
            iframe.style.pointerEvents = "none";
        }

        // Function to enable interactions with the iframe
        function enableIframe(iframe) {
            console.log("enabled");
            iframe.style.pointerEvents = "auto";
        }

    </script>
</body>
</html>